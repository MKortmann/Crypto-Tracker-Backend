service:
  name: crypto-tracker-backend

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  # I need serverless-aws-documentation & serverless-reqvalidator-plugin to allows us to
  # validate our http income request using schema
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  # to run it locally
  - serverless-offline
  - serverless-dynamodb-local
  # Add Canary Deployment to be able to deploy our neu func. step by step
  - serverless-plugin-canary-deployments

provider:
  name: aws
  runtime: nodejs12.x

  tracing:
    # enable tracing for our lambda and apiGateway
    lambda: true
    apiGateway: true

  # it should use the option provide in the CLI if it is set, if not, use dev.
  # so, if you deploy without use stage parameter, serverless will include dev
  stage: ${opt:stage, 'dev'}
  # if region is provide then use it, if not use 'eu-central-1'
  region: ${opt:region, 'eu-central-1'}

  # global environment variables
  environment:
    # The DynamoDB table have unique names. They need to be unique per account per region
    # Names are UTF-8 encoded, case-sensitive and should be between 3 and 255 charaters long
    TRADES_TABLE: ${self:service.name}-trades-${self:provider.stage}
    # bucket name should not contain uppgercase characters
    USER_IMAGE_S3_BUCKET: ${self:service.name}-images-${self:provider.stage}
    # add a presigned url for the upload url s3 bucket - 10 minutes expiration time
    USER_SIGNED_URL_EXPIRATION: 700
    INDEX_TRADE_TABLE: tradeDate
    INDEX_EXCHANGE_TABLE: exchange
    INDEX_CRYPTO_TABLE: crypto
    DYNAMODB_OFFLINE_PORT: 8000
    SERVERLESS_OFFLINE_PORT: 3000

  iamRoleStatements:
    # for canary deployment to allow to use codedeploy
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: 'Allow' # xray permissions (required)
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'

# to define models to our api we need to define models for our object in custom
custom:
  serverless-offline:
    port: ${self:provider.environment.SERVERLESS_OFFLINE_PORT}
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: ${self:provider.environment.DYNAMODB_OFFLINE_PORT}
      # all the data will be store in memory
      inMemory: true
      # it should create tables as definitions provided
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Trade API
        description: Serverless application for crypto-tracker add/update/delete/edit cryptos
    models:
      - name: createTrade
        contentType: application/json
        schema: ${file(models/create-trade-request.json)}
      - name: updateTrade
        contentType: application/json
        # the schema definition is a file that is located here
        schema: ${file(models/update-trade-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Get all trades
  GetTrades:
    handler: src/lambda/http/getTrades.handler
    events:
      - http:
          method: get
          path: trades
          # fix problem with preflight request
          cors: true
          # so we specified here that it should use the auth func. specified before
          authorizer: Auth
    iamRoleStatements:
      # TRADES_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRADES_TABLE}

  # GetTrades regards to a specific exchange
  GetTradesAtExchange:
    handler: src/lambda/http/getTradesAtExchange.handler
    events:
      - http:
          method: get
          path: trades/exchange/{exchange}
          # fix problem with preflight request
          cors: true
          # so we specified here that it should use the auth func. specified before
          # authorizer: Auth
    iamRoleStatements:
      # TRADES_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRADES_TABLE}/index/${self:provider.environment.INDEX_EXCHANGE_TABLE}

  # GetTrades relative with a specific crypto
  GetTradesWithCrypto:
    handler: src/lambda/http/getTradesWithCrypto.handler
    events:
      - http:
          method: get
          path: trades/crypto/{crypto}
          # fix problem with preflight request
          cors: true
          # so we specified here that it should use the auth func. specified before
          # authorizer: Auth
    iamRoleStatements:
      # TRADES_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRADES_TABLE}/index/${self:provider.environment.INDEX_CRYPTO_TABLE}

  createTrade:
    handler: src/lambda/http/createTrade.handler
    events:
      - http:
          method: post
          path: trades
          cors: true
          # so we specified here that it should use the auth func. specified before
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new trade item
            description: Create a trade item
            requestModels:
              'application/json': createTrade
    iamRoleStatements:
      # TRADES_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRADES_TABLE}

  UpdateTrade:
    handler: src/lambda/http/updateTrade.handler
    events:
      - http:
          method: patch
          path: trades/{tradeId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a trade item
            description: Update a trade item
            requestModels:
              'application/json': updateTrade
    iamRoleStatements:
      # TRADES_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRADES_TABLE}
  # adding deployment settings for canary deployment, but commented because of
  # deploymentSettings:
  #   type: Linear10Percent1Minute
  #   alias: Live

  DeleteTrade:
    handler: src/lambda/http/deleteTrade.handler
    events:
      - http:
          method: delete
          path: trades/{tradeId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      # TRADES_TABLE permissions for all lambda functions
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRADES_TABLE}
      # add permissions to be able to put and get objects for our s3 bucket
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.USER_IMAGE_S3_BUCKET}/*

  # add permissions
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: trades/{tradeId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.USER_IMAGE_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRADES_TABLE}

resources:
  Resources:
    # Add DynamoDB Table Definition
    # DynamoDB is schemaless, we need to define only the primary key and global secondary keys.
    tradesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # single id field of type string which is the partition key
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tradeDate
            AttributeType: S
          - AttributeName: tradeId
            AttributeType: S
          - AttributeName: exchange
            AttributeType: S
          - AttributeName: crypto
            AttributeType: S
        # so, we set the simple primary key as hash key
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tradeId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_TRADE_TABLE}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: tradeDate
                KeyType: RANGE
            Projection:
              # the full item is available in the secondary index with all attributes
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.INDEX_EXCHANGE_TABLE}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: exchange
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.INDEX_CRYPTO_TABLE}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: crypto
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TRADES_TABLE}

    # add S3 buckte to store images
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.USER_IMAGE_S3_BUCKET}
        # important so S3 can send the correct CORS HEADERS
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    # Add BucketPolicy to allow to read images in our application
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              # allows for anybody '*' to get objects of our s3 bucket
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.USER_IMAGE_S3_BUCKET}/*'
        # specify which bucket this bucketPolicy should be applied
        Bucket: !Ref AttachmentsBucket

    # we need to provide correct CORS headers if our customer authorizer
    # denies access to any functions. It set correct CORS headers if our customer authorizer fails.
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # we need additional Resources to validate our http requests through a schema
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      # we need a name and an id of the api which we will use
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        # it only validate body requests and not request parameters
        ValidateRequestBody: true
        ValidateRequestParameters: false
